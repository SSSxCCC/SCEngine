#ifndef _VulkanManager_H_
#define _VulkanManager_H_

#include "common/Platform.h"
#include <optional>
#include <vector>
#include <cstdint>    // Necessary for uint32_t
#define GLM_FORCE_RADIANS
#define GLM_FORCE_DEPTH_ZERO_TO_ONE  // The perspective projection matrix generated by GLM will use the OpenGL depth range of -1.0 to 1.0 by default. We need to configure it to use the Vulkan range of 0.0 to 1.0 using the GLM_FORCE_DEPTH_ZERO_TO_ONE definition.
#define GLM_LANG_STL11_FORCED
#define GLM_ENABLE_EXPERIMENTAL
#include <glm/glm.hpp>
#include <glm/gtc/matrix_transform.hpp>
#include <glm/gtx/hash.hpp>
#include <array>

struct Vertex {
    glm::vec3 pos;
    glm::vec3 color;

    bool operator==(const Vertex& other) const {
        return pos == other.pos && color == other.color;
    }

    static VkVertexInputBindingDescription getBindingDescription() {
        VkVertexInputBindingDescription bindingDescription{};
        bindingDescription.binding = 0;
        bindingDescription.stride = sizeof(Vertex);
        bindingDescription.inputRate = VK_VERTEX_INPUT_RATE_VERTEX;
        return bindingDescription;
    }

    static std::vector<VkVertexInputAttributeDescription> getAttributeDescriptions() {
        std::vector<VkVertexInputAttributeDescription> attributeDescriptions(2);
        attributeDescriptions[0].binding = 0;
        attributeDescriptions[0].location = 0;
        attributeDescriptions[0].format = VK_FORMAT_R32G32B32_SFLOAT;
        attributeDescriptions[0].offset = offsetof(Vertex, pos);
        attributeDescriptions[1].binding = 0;
        attributeDescriptions[1].location = 1;
        attributeDescriptions[1].format = VK_FORMAT_R32G32B32_SFLOAT;
        attributeDescriptions[1].offset = offsetof(Vertex, color);
        return attributeDescriptions;
    }
};

template <>
struct std::hash<Vertex> {
    size_t operator()(Vertex const& vertex) const {
        return ((std::hash<glm::vec3>()(vertex.pos) ^
                (std::hash<glm::vec3>()(vertex.color) << 1)) >> 1);
    }
};

class VulkanManager {
friend class SCEngineEditor;
friend class SubWindow;
public:
    VulkanManager(Platform* platform) : mPlatform(platform) { initVulkan(); }
    ~VulkanManager() { cleanup(); }

    // Used by Script
    VkPipeline createGraphicsPipeline(const std::vector<char>& vertShaderSpv, const std::vector<char>& fragShaderSpv, const VkVertexInputBindingDescription& vertexInputBindingDescription, const std::vector<VkVertexInputAttributeDescription>& vertexInputAttributeDescriptions, VkPipelineLayout pipelineLayout, VkRenderPass renderPass);
    VkShaderModule createShaderModule(const std::vector<char>& code);
    void createVertexBuffer(void const* vertexData, VkDeviceSize bufferSize, VkBuffer& vertexBuffer, VkDeviceMemory& vertexBufferMemory);
    void createIndexBuffer(void const* indexData, VkDeviceSize bufferSize, VkBuffer& indexBuffer, VkDeviceMemory& indexBufferMemory);
    void createUniformBuffers(VkDeviceSize bufferSize, std::vector<VkBuffer>& uniformBuffers, std::vector<VkDeviceMemory>& uniformBuffersMemory, std::vector<void*>& uniformBuffersMapped);

    // Help methods to create vulkan objects for main window or sub window
    VkRenderPass createRenderPass(VkImageLayout resolveFinalLayout);
    void createColorResources(uint32_t width, uint32_t height, VkImage& image, VkDeviceMemory& imageMemory, VkImageView& imageView);
    void createDepthResources(uint32_t width, uint32_t height, VkImage& image, VkDeviceMemory& imageMemory, VkImageView& imageView);
    void createFramebuffers(uint32_t width, uint32_t height, VkImageView colorImageView, VkImageView depthImageView, const std::vector<VkImageView>& resolveImageViews, VkRenderPass renderPass, std::vector<VkFramebuffer>& framebuffers);
    void createCommandBuffers(std::vector<VkCommandBuffer>& commandBuffers);
    void createImage(uint32_t width, uint32_t height, uint32_t mipLevels, VkSampleCountFlagBits numSamples, VkFormat format, VkImageTiling tiling, VkImageUsageFlags usage, VkMemoryPropertyFlags properties, VkImage& image, VkDeviceMemory& imageMemory);
    VkImageView createImageView(VkImage image, VkFormat format, VkImageAspectFlags aspectFlags, uint32_t mipLevels);
    VkSampler createSampler();

    VkDevice getDevice() { return mDevice; }
    VkFormat getImageFormat() { return mSwapChainImageFormat; }
    uint32_t getCurrentFrame() { return mCurrentFrame; }
    VkDescriptorPool getDescriptorPool() { return mDescriptorPool; }
    VkRenderPass getRenderPass() { return mSubWindowRenderPass; }  // TODO: delete this

    const int MAX_FRAMES_IN_FLIGHT = 2;
private:
    const std::vector<const char*> VALIDATION_LAYERS = { "VK_LAYER_KHRONOS_validation" };
#ifdef NDEBUG
    const bool ENABLE_VALIDATION_LAYERS = false;
#else
    const bool ENABLE_VALIDATION_LAYERS = true;
#endif
    const std::vector<const char*> DEVICE_EXTENSIONS = { VK_KHR_SWAPCHAIN_EXTENSION_NAME };

    Platform* mPlatform;

    // Common used vulkan objects
    VkInstance mInstance;
    VkPhysicalDevice mPhysicalDevice = VK_NULL_HANDLE;
    VkDevice mDevice;
    VkQueue mGraphicsQueue;
    VkFormat mSwapChainImageFormat;
    VkCommandPool mCommandPool;
    VkDescriptorPool mDescriptorPool;
    VkSampleCountFlagBits mMsaaSamples = VK_SAMPLE_COUNT_1_BIT;
    uint32_t mCurrentFrame = 0;  // sub windows use this property to synchronize with the main window

    // Main window used only vulkan objects
    VkSurfaceKHR mSurface;
    VkQueue mPresentQueue;
    VkRenderPass mRenderPass;
    VkImage mDepthImage;
    VkDeviceMemory mDepthImageMemory;
    VkImageView mDepthImageView;
    VkImage mColorImage;
    VkDeviceMemory mColorImageMemory;
    VkImageView mColorImageView;
    VkSwapchainKHR mSwapChain;
    VkExtent2D mSwapChainExtent;
    std::vector<VkImage> mSwapChainImages;  // size is the number of images in swapchain
    std::vector<VkImageView> mSwapChainImageViews;  // size is the number of images in swapchain
    std::vector<VkFramebuffer> mSwapChainFramebuffers;  // size is the number of images in swapchain
    std::vector<VkCommandBuffer> mCommandBuffers;  // size is MAX_FRAMES_IN_FLIGHT
    std::vector<VkSemaphore> mImageAvailableSemaphores;  // size is MAX_FRAMES_IN_FLIGHT
    std::vector<VkSemaphore> mRenderFinishedSemaphores;  // size is MAX_FRAMES_IN_FLIGHT
    std::vector<VkFence> mInFlightFences;  // size is MAX_FRAMES_IN_FLIGHT
    uint32_t mImageIndex;
    bool mFramebufferResized = false;

    // Sub window used only vulkan objects
    VkRenderPass mSubWindowRenderPass;

    struct QueueFamilyIndices {
        std::optional<uint32_t> graphicsFamily;
        std::optional<uint32_t> presentFamily;

        bool isComplete() {
            return graphicsFamily.has_value() && presentFamily.has_value();
        }
    };

    struct SwapChainSupportDetails {
        VkSurfaceCapabilitiesKHR capabilities;
        std::vector<VkSurfaceFormatKHR> formats;
        std::vector<VkPresentModeKHR> presentModes;
    };

    const std::vector<Vertex> mVertices = {
        {{-0.5f, -0.5f, 0.0f}, {1.0f, 0.0f, 0.0f}},
        {{0.5f, -0.5f, 0.0f}, {0.0f, 1.0f, 0.0f}},
        {{0.5f, 0.5f, 0.0f}, {0.0f, 0.0f, 1.0f}},
        {{-0.5f, 0.5f, 0.0f}, {1.0f, 1.0f, 1.0f}}
    };

    const std::vector<uint32_t> mIndices = {
        0, 1, 2, 2, 3, 0
    };

    VkDescriptorSetLayout mDescriptorSetLayout;
    VkPipelineLayout mPipelineLayout;
    VkPipeline mGraphicsPipeline;
    VkBuffer mVertexBuffer;
    VkDeviceMemory mVertexBufferMemory;
    VkBuffer mIndexBuffer;
    VkDeviceMemory mIndexBufferMemory;

    struct UniformBufferObject {
        glm::mat4 model;
        glm::mat4 view;
        glm::mat4 proj;
    };

    std::vector<VkBuffer> mUniformBuffers;
    std::vector<VkDeviceMemory> mUniformBuffersMemory;
    std::vector<void*> mUniformBuffersMapped;

    std::vector<VkDescriptorSet> mDescriptorSets;

    //uint32_t mMipLevels;
    //VkImage mTextureImage;
    //VkDeviceMemory mTextureImageMemory;
    //VkImageView mTextureImageView;
    //VkSampler mTextureSampler;

    void initVulkan();
    void cleanup();
    VkCommandBuffer preDrawFrame();
    void postDrawFrame();
    void framebufferResized() { mFramebufferResized = true; }

    // Create common vulkan objects
    void createInstance();
    bool checkValidationLayerSupport();
    void pickPhysicalDevice();
    bool isDeviceSuitable(VkPhysicalDevice device);
    bool checkDeviceExtensionSupport(VkPhysicalDevice device);
    QueueFamilyIndices findQueueFamilies(VkPhysicalDevice device);
    VkSampleCountFlagBits getMaxUsableSampleCount();
    void createLogicalDevice();
    void createCommandPool();
    void createDescriptorPool();

    // Create vulkan objects for main window
    void createSurface();
    void createSwapChain();
    void createSwapChainImageViews();
    SwapChainSupportDetails querySwapChainSupport(VkPhysicalDevice device);
    VkSurfaceFormatKHR chooseSwapSurfaceFormat(const std::vector<VkSurfaceFormatKHR>& availableFormats);
    VkPresentModeKHR chooseSwapPresentMode(const std::vector<VkPresentModeKHR>& availablePresentModes);
    VkExtent2D chooseSwapExtent(const VkSurfaceCapabilitiesKHR& capabilities);
    void recreateSwapChain();
    void cleanupSwapChain();
    void createSyncObjects();

    // Help functions
    VkFormat findDepthFormat();
    VkFormat findSupportedFormat(const std::vector<VkFormat>& candidates, VkImageTiling tiling, VkFormatFeatureFlags features);
    bool hasStencilComponent(VkFormat format);
    void transitionImageLayout(VkImage image, VkFormat format, VkImageLayout oldLayout, VkImageLayout newLayout, uint32_t mipLevels);
    void copyBufferToImage(VkBuffer buffer, VkImage image, uint32_t width, uint32_t height);
    void generateMipmaps(VkImage image, VkFormat imageFormat, int32_t texWidth, int32_t texHeight, uint32_t mipLevels);
    void createBuffer(VkDeviceSize size, VkBufferUsageFlags usage, VkMemoryPropertyFlags properties, VkBuffer& buffer, VkDeviceMemory& bufferMemory);
    uint32_t findMemoryType(uint32_t typeFilter, VkMemoryPropertyFlags properties);
    void copyBuffer(VkBuffer srcBuffer, VkBuffer dstBuffer, VkDeviceSize size);
    VkCommandBuffer beginSingleTimeCommands();
    void endSingleTimeCommands(VkCommandBuffer commandBuffer);
    void beginRender(VkCommandBuffer commandBuffer, VkRenderPass renderPass, VkFramebuffer frameBuffer, VkExtent2D extent);
    void endRender(VkCommandBuffer commandBuffer, const std::vector<VkSemaphore>& waitSemaphores, const std::vector<VkPipelineStageFlags>& waitStages, const std::vector<VkSemaphore>& signalSemaphores, VkFence fence);

    // Used by Script
    void createDescriptorSetLayout();
    void createDescriptorSets();
    void updateUniformBuffer(uint32_t currentImage);
};

#endif // _VulkanManager_H_
